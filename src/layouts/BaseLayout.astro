---
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import Loader from '../components/Loader.astro';
import '../styles/global.scss';

const { title = 'ROULLAND Thomas' } = Astro.props;
---

<html lang="fr">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{title}</title>
    <meta name="description" content="Portfolio de Thomas Roulland, développeur web spécialisé dans le frontend." />
    <link rel="icon" href="/favicon-32x32.png" type="image/x-icon" />
  </head>
  <body class="no-scroll">
    <Header />

    <canvas id="particles"></canvas>

    <Loader />

    <main class="page" id="scroll-container">
      <slot />
      <Footer />
    </main>

    <div class="mail">
      <a href="mailto:roulland.thomass@gmail.com">roulland.thomass@gmail.com</a>
    </div>

    <script type="module">
      import gsap from 'https://cdn.skypack.dev/gsap';
      import ScrollToPlugin from 'https://cdn.skypack.dev/gsap/ScrollToPlugin';
      gsap.registerPlugin(ScrollToPlugin);

      const canvas = document.getElementById('particles');
      const ctx = canvas.getContext('2d');

      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;

      const dotsArray = [];
      const numberOfDots = 50;
      
      // Définir la couleur des particules comme blanc avec 50% d'opacité
      const colors = ['rgba(255, 255, 255, 0.2)'];

      let speedFactor = window.innerWidth <= 768 ? 0.2 : 0.5; // Vitesse réduite par rapport à la vitesse initiale

      class Dot {
        constructor() {
          this.x = Math.random() * canvas.width;
          this.y = Math.random() * canvas.height;
          this.size = Math.random() * 2 + 1; 
          this.speedX = (Math.random() * 2 - 1) * speedFactor;
          this.speedY = (Math.random() * 2 - 1) * speedFactor;

          // Propriétés liées au flou
          this.maxBlur = Math.random() * 20 + 1; 
          this.blur = this.maxBlur; 
          this.blurDirection = -1;
          this.blurSpeed = Math.random() * 0.08 + 0.01;

          // Assigner une couleur aléatoire depuis le tableau colors
          this.color = colors[Math.floor(Math.random() * colors.length)];
        }

        update() {
          this.x += this.speedX;
          this.y += this.speedY;

          // Faire en sorte que les particules apparaissent de l'autre côté lorsqu'elles sortent des bords
          if (this.x > canvas.width) this.x = 0;
          if (this.x < 0) this.x = canvas.width;
          if (this.y > canvas.height) this.y = 0;
          if (this.y < 0) this.y = canvas.height;

          // Mise à jour du flou
          this.blur += this.blurDirection * this.blurSpeed;

          // Inverser la direction du flou quand les limites sont atteintes
          if (this.blur <= 0) {
            this.blur = 0;
            this.blurDirection = 1;
          } else if (this.blur >= this.maxBlur) {
            this.blur = this.maxBlur;
            this.blurDirection = -1;
          }
        }

        draw() {
          ctx.save();
          ctx.fillStyle = this.color;
          ctx.beginPath();
          ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
          ctx.closePath();
          ctx.fill();
          ctx.restore();
        }
      }

      function init() {
        if (window.innerWidth <= 768) {
          for (let i = 0; i < 20; i++) {
            dotsArray.push(new Dot());
          }
        } else {
          for (let i = 0; i < numberOfDots; i++) {
            dotsArray.push(new Dot());
          } // Plus de particules pour les écrans plus larges
        }
      }

      function animate() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        dotsArray.forEach(dot => {
          dot.update();
          dot.draw();
        });
        requestAnimationFrame(animate);
      }

      window.addEventListener('resize', function () {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
      });

      init();
      animate();


      const sections = document.querySelectorAll('section:not(.loader)');

      function getAnimatableElements(section) {
        const selectors = [
          'h1', 'h2', 'h3', 'h4', 'h5', 'h6',
          'p', 'a', 'span',
          '.logo-stack','svg',
          '.card', '.project', '.skill',
          'li', 'blockquote',
          'button', '.btn',
          'form', 'input', 'textarea',
          '[data-animate]'
        ];

        const elements = [];
        selectors.forEach(selector => {
          const found = section.querySelectorAll(selector);
          found.forEach(el => {
            if (!elements.includes(el) && !elements.some(parent => parent.contains(el))) {
              elements.push(el);
            }
          });
        });

        return elements;
      }

      sections.forEach(section => {
        const elements = getAnimatableElements(section);
        elements.forEach(el => {
          gsap.set(el, { 
            opacity: 0, 
            y: 60,
            scale: 0.95,
            delay: Math.random() * 0.1
          });
        });
      });

      function animateSection(section) {
        const elements = getAnimatableElements(section);
        const tl = gsap.timeline();
        elements.forEach((el, index) => {
          const delay = index * 0.08;
          tl.to(el, {
            opacity: 1,
            y: 0,
            scale: 1,
            duration: 0.8,
            ease: "power3.out",
          }, delay);
        });
        return tl;
      }

      const observerOptions = {
        threshold: 0.1,
        rootMargin: '-10% 0px -10% 0px'
      };

      const sectionObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting && !entry.target.classList.contains('animated')) {
            animateSection(entry.target);
            entry.target.classList.add('animated');
          }
        });
      }, observerOptions);

      sections.forEach(section => {
        sectionObserver.observe(section);
      });

      const svgs = document.querySelectorAll('.star');
      svgs.forEach((svg) => {
        gsap.to(svg, {
          rotation: 360,
          duration: 5,
          repeat: -1,
          ease: 'linear',
          transformOrigin: '50% 50%',
        });
      });

      // ==== MENU ====
      const burger = document.querySelector('.burger');
      const checkbox = document.querySelector('#openMenu');
      const nav = document.querySelector('#menuNav');
      const overlay = document.querySelector('#menuOverlay');
      const navItems = nav.querySelectorAll('.navigation .items *');
      const contact = nav.querySelector('.contact');

      gsap.set(nav, { x: '100%' });
      gsap.set(overlay, { opacity: 0, pointerEvents: 'none' });
      gsap.set([...navItems, contact], { opacity: 0, y: 20 });

      const animConfig = {
        duration: {
          overlay: 0.8,
          nav: 1.2,
          items: 0.7,
          contact: 0.7
        },
        ease: {
          in: "power3.inOut",
          out: "power3.out", 
          items: "back.out(1.4)"  
        },
        stagger: 0.08,
        delay: {
          items: 0.3,
          contact: 0.5
        }
      };

      function openMenu() {
        gsap.to(overlay, {
          opacity: 0.95,
          duration: animConfig.duration.overlay,
          ease: animConfig.ease.out,
          pointerEvents: 'auto'
        });
        
        gsap.to(nav, {
          x: 0,
          duration: animConfig.duration.nav,
          ease: animConfig.ease.out
        });
        
        gsap.to(navItems, {
          opacity: 1,
          y: 0,
          duration: animConfig.duration.items,
          ease: animConfig.ease.items,
          stagger: animConfig.stagger,
          delay: animConfig.delay.items
        });
        
        gsap.to(contact, {
          opacity: 1,
          y: 0,
          duration: animConfig.duration.contact,
          ease: animConfig.ease.items,
          delay: animConfig.delay.contact
        });
      }

      function closeMenu() {
        gsap.to([...navItems, contact], {
          opacity: 0,
          y: 15,
          duration: animConfig.duration.items * 0.7,
          ease: animConfig.ease.in,
          stagger: animConfig.stagger / 2
        });

        gsap.to(nav, {
          x: '100%',
          duration: animConfig.duration.nav * 0.8,
          ease: animConfig.ease.in,
          delay: 0.2
        });

        gsap.to(overlay, {
          opacity: 0,
          duration: animConfig.duration.overlay * 0.8,
          ease: animConfig.ease.in,
          pointerEvents: 'none',
          delay: 0.1
        });
      }

      checkbox.addEventListener('change', () => {
        burger.style.pointerEvents = 'none';
        checkbox.checked ? openMenu() : closeMenu();
        setTimeout(() => {
          burger.style.pointerEvents = 'auto';
        }, animConfig.duration.nav * 1000);
      });

      overlay.addEventListener('click', () => {
        checkbox.checked = false;
        checkbox.dispatchEvent(new Event('change'));
      });

      const menuLinks = nav.querySelectorAll('a');
      menuLinks.forEach(link => {
        link.addEventListener('click', (e) => {
          const href = link.getAttribute('href');
          const isInternalLink = href && (href.startsWith('#') || href === '');

          checkbox.checked = false;
          checkbox.dispatchEvent(new Event('change'));

          if (isInternalLink) {
            e.preventDefault();

            setTimeout(() => {
              const targetId = href.substring(1);
              const target = document.getElementById(targetId);
              if (target) {
                gsap.to(window, {
                  duration: 1.5, // ⬅️ ajuste cette valeur pour la vitesse
                  scrollTo: target,
                  ease: "power2.out"
                });
              } else {
                gsap.to(window, {
                  duration: 1.5,
                  scrollTo: 0,
                  ease: "power2.out"
                });
              }
            }, 300);
          }
        });
      });

      burger.addEventListener('mouseenter', () => {
        gsap.to(burger, { scale: 1.05, duration: 0.3, ease: "power2.out" });
      });

      burger.addEventListener('mouseleave', () => {
        gsap.to(burger, { scale: 1, duration: 0.3, ease: "power2.out" });
      });

      burger.addEventListener('click', () => {
        gsap.to(burger, {
          scale: 0.95,
          duration: 0.1,
          yoyo: true,
          repeat: 1,
          ease: "power1.in"
        });
      });

      

      // Animation d'entrée initiale
      window.addEventListener('load', () => {
        setTimeout(() => {
          document.body.classList.remove('no-scroll');
        }, 4000);
        setTimeout(() => {
          const firstSection = sections[0];
          if (firstSection && firstSection.getBoundingClientRect().top < window.innerHeight * 0.8) {
            animateSection(firstSection);
            firstSection.classList.add('animated');
          }
        }, 100);
      });
    </script>
  </body>
</html>
